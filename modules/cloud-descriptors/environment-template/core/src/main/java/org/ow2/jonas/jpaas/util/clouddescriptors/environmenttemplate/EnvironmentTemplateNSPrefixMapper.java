/**
 * JPaaS Util
 * Copyright (C) 2012 Bull S.A.S.
 * Contact: jasmine@ow2.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 * --------------------------------------------------------------------------
 * $Id$
 * --------------------------------------------------------------------------
 */

package org.ow2.jonas.jpaas.util.clouddescriptors.environmenttemplate;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

/**
 * Customize namespace prefixes generated by JAXB
 * @author Mohammed Boukada
 */
public class EnvironmentTemplateNSPrefixMapper extends NamespacePrefixMapper {

    /**
     * Environment template namespace prefix
     */
    private final String ENVIRONMENT_TEMPLATE_PREFIX = "";

    /**
     * Jk namespace prefix
     */
    private final String JK_PREFIX = "jk";

    /**
     * Jonas namespace prefix
     */
    private final String JONAS_PREFIX = "jonas";

    /**
     * External DB namespace prefix
     */
    private final String EXTERNAL_DB_PREFIX = "external-db";

    /**
     * Connector namespace prefix
     */
    private final String CONNECTOR_PREFIX = "connector";

    /**
     * Datasource namespace prefix
     */
    private final String DATASOURCE_PREFIX = "datasource";


    @Override
    public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) {
        Object version = EnvironmentTemplatePropertiesManager.getEnvironmentTemplateVersion(namespaceUri);
        if (version != null) {
            // namespaceURI corresponds to environment-template
            return ENVIRONMENT_TEMPLATE_PREFIX;
        } else {
            version = EnvironmentTemplatePropertiesManager.getJkVersion(namespaceUri);
            if (version != null) {
                // namespaceURI corresponds to jk
                return JK_PREFIX;
            } else {
                version = EnvironmentTemplatePropertiesManager.getJonasVersion(namespaceUri);
                if (version != null) {
                    // namespaceURI corresponds to jonas
                    return JONAS_PREFIX;
                } else {
                    version = EnvironmentTemplatePropertiesManager.getExternalDBVersion(namespaceUri);
                    if (version != null) {
                        // namespaceURI corresponds to external-db
                        return EXTERNAL_DB_PREFIX;
                    } else {
                        version = EnvironmentTemplatePropertiesManager.getConnectorVersion(namespaceUri);
                        if (version != null) {
                            // namespaceURI corresponds to connector
                            return CONNECTOR_PREFIX;
                        } else {
                            version = EnvironmentTemplatePropertiesManager.getDatasourceVersion(namespaceUri);
                            if (version != null) {
                                return DATASOURCE_PREFIX;
                            }
                        }
                    }
                }
            }
        }
        return suggestion;
    }
}
