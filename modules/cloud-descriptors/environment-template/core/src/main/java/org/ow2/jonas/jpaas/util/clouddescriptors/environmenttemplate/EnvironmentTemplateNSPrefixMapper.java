/**
 * JPaaS
 * Copyright 2012 Bull S.A.S.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * $Id:$
 */

package org.ow2.jonas.jpaas.util.clouddescriptors.environmenttemplate;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

/**
 * Customize namespace prefixes generated by JAXB
 * @author Mohammed Boukada
 */
public class EnvironmentTemplateNSPrefixMapper extends NamespacePrefixMapper {

    /**
     * Environment template namespace prefix
     */
    private final String ENVIRONMENT_TEMPLATE_PREFIX = "";

    /**
     * Jk namespace prefix
     */
    private final String JK_PREFIX = "jk";

    /**
     * Jonas namespace prefix
     */
    private final String JONAS_PREFIX = "jonas";

    /**
     * External DB namespace prefix
     */
    private final String EXTERNAL_DB_PREFIX = "external-db";

    /**
     * Connector namespace prefix
     */
    private final String CONNECTOR_PREFIX = "connector";

    /**
     * Datasource namespace prefix
     */
    private final String DATASOURCE_PREFIX = "datasource";


    @Override
    public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) {
        Object version = EnvironmentTemplatePropertiesManager.getEnvironmentTemplateVersion(namespaceUri);
        if (version != null) {
            // namespaceURI corresponds to environment-template
            return ENVIRONMENT_TEMPLATE_PREFIX;
        } else {
            version = EnvironmentTemplatePropertiesManager.getJkVersion(namespaceUri);
            if (version != null) {
                // namespaceURI corresponds to jk
                return JK_PREFIX;
            } else {
                version = EnvironmentTemplatePropertiesManager.getJonasVersion(namespaceUri);
                if (version != null) {
                    // namespaceURI corresponds to jonas
                    return JONAS_PREFIX;
                } else {
                    version = EnvironmentTemplatePropertiesManager.getExternalDBVersion(namespaceUri);
                    if (version != null) {
                        // namespaceURI corresponds to external-db
                        return EXTERNAL_DB_PREFIX;
                    } else {
                        version = EnvironmentTemplatePropertiesManager.getConnectorVersion(namespaceUri);
                        if (version != null) {
                            // namespaceURI corresponds to connector
                            return CONNECTOR_PREFIX;
                        } else {
                            version = EnvironmentTemplatePropertiesManager.getDatasourceVersion(namespaceUri);
                            if (version != null) {
                                return DATASOURCE_PREFIX;
                            }
                        }
                    }
                }
            }
        }
        return suggestion;
    }
}
